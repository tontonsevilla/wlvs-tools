@model WLVSTools.Web.Models.DeveloperTools.GenerateFakePersonalInfo

@{
    ViewBag.Title = "Generate Fake Personal Info";
}

<div class="card">
    <div class="card-body">
        <div class="form-group">
            @Html.LabelFor(m => m.Country)
            @Html.DropDownListFor(m => m.Country, Model.CountryList, null, new { @class = "form-control" })
            @Html.ValidationMessageFor(m => m.Country)
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.State)
            @Html.DropDownListFor(m => m.State, Model.StateList, null, new { @class = "form-control" })
            @Html.ValidationMessageFor(m => m.State)
        </div>
        <button type="button" id="btnGenerate" class="btn btn-primary fa-pull-right">Generate</button>
    </div>
</div>

<div class="card">
    <div class="card-body">
        <pre><code id="resultContainer"></code></pre>
    </div>
</div>

@if (Model != null)
{
    @section Styles{
        <style>
            pre {
                background-color: ghostwhite;
                border: 1px solid silver;
                padding: 10px 20px;
                margin: 20px;
            }

            .json-key {
                color: brown;
            }

            .json-value {
                color: navy;
            }

            .json-string {
                color: olive;
            }
        </style>
    }

    @section Scripts{
        <script>
            $(function () {
                $("#btnGenerate").on("click", function () {
                    let selectedCountry = $("#Country").val();
                    let selectedState = $("#State").val();

                    sendRequest(`/api/Generate/Personalinfo?country=${selectedCountry}&state=${selectedState}`)
                        .done(function (data, textStatus, jqXHR) {
                            let prettyPrint = new PrettyPrint(data, true);
                            $('#resultContainer').html(prettyPrint.print());

                            $(".btn-copy").off("click").on("click", function () {
                                let value = $(this).parent().text().replace(/["']/g, "");
                                navigator.clipboard.writeText(value);
                                toastr.success("Copy '" + value + "'", "Successful");
                            });

                            $("#pTotalRuntime").html('<strong>Total Runtime in Seconds: <em>' + data.totalRunTimeInSeconds.toString() + '</em></strong>');
                        })
                        .fail(function (jqXHR, textStatus, errorThrown) {
                            let prettyPrint = new PrettyPrint(JSON.parse(jqXHR.responseText));
                            $('#resultContainer').html(prettyPrint.print());
                        });
                });

                $("#Country").on("change", function () {
                    let selectedCountry = $(this).val();
                    
                    if (selectedCountry == "United States") {
                        $("#State").prop("disabled", false);
                    } else {
                        $("#State").val("");
                        $("#State").prop("disabled", true);
                    }
                });

                $("#Country").trigger("change");
            });
        </script>
    }
}